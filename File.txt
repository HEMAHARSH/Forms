import xml.etree.ElementTree as ET
from xml.dom import minidom

class Output:
    def generate_json_report(self, all_results, config):
        report = {"report": {"checks": all_results}}
        report_file = "report.json"
        with open(report_file, "w") as f:
            json.dump(report, f, indent=4)
        print(f"Report saved to {report_file}")

    def generate_xml_report(self, all_results, config):
        root = ET.Element("report")
        checks = ET.SubElement(root, "checks")

        for result in all_results:
            check = ET.SubElement(checks, "check")
            ET.SubElement(check, "type").text = result.get("type")
            ET.SubElement(check, "db_type").text = result.get("db_type")

            results = ET.SubElement(check, "results")
            for res in result.get("results", []):
                result_element = ET.SubElement(results, "result")
                ET.SubElement(result_element, "query").text = res.get("query")
                ET.SubElement(result_element, "status").text = res.get("status")
                ET.SubElement(result_element, "message").text = res.get("message")

        # Pretty-print the XML
        xml_str = ET.tostring(root, encoding="utf-8")
        pretty_xml = minidom.parseString(xml_str).toprettyxml(indent="  ")

        report_file = "report.xml"
        with open(report_file, "w", encoding="utf-8") as f:
            f.write(pretty_xml)

        print(f"Report saved to {report_file}")
